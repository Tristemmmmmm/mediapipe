import pygame
import sys
import random
import cv2
import mediapipe as mp

cap = cv2.VideoCapture(0)
mpHands = mp.solutions.hands
hands = mpHands.Hands()
mpDraw = mp.solutions.drawing_utils




pygame.init()
screen = pygame.display.set_mode((1280, 720))
clock = pygame.time.Clock()
pygame.display.set_caption("Xmas dragon Game")

game_font = pygame.font.Font("PressStart2P-Regular.ttf", 24) #字體及大小

# Classes


class Cloud(pygame.sprite.Sprite):
    def __init__(self, image, x_pos, y_pos):
        super().__init__()
        self.image = image
        self.x_pos = x_pos
        self.y_pos = y_pos
        self.rect = self.image.get_rect(center=(self.x_pos, self.y_pos))

    def update(self):
        self.rect.x -= 1


class Dino(pygame.sprite.Sprite):
    def __init__(self, x_pos, y_pos):
        super().__init__()
        self.running_sprites = []
        self.ducking_sprites = []

        self.running_sprites.append(pygame.transform.scale(
            pygame.image.load("dragon3.png"), (80, 100)))
        self.running_sprites.append(pygame.transform.scale(
            pygame.image.load("dragon2.png"), (80, 100)))

        self.ducking_sprites.append(pygame.transform.scale(
            pygame.image.load(f"dragon4.png"), (110, 60)))
        self.ducking_sprites.append(pygame.transform.scale(
            pygame.image.load(f"dragon5.png"), (110, 60)))

        self.x_pos = x_pos
        self.y_pos = y_pos
        self.current_image = 0
        self.image = self.running_sprites[self.current_image]
        self.rect = self.image.get_rect(center=(self.x_pos, self.y_pos))
        self.velocity = 40 #50 跳的高度 越小越高 負值依舊越高
        self.gravity = 4 #4.5 降落時的速度 越大越快 負值為上升
        self.ducking = False
        self.onground=True

    def jump(self):
        
        if self.rect.centery >= 360 and self.onground==True:
            jump_sfx.play()
            while self.rect.centery - self.velocity > 40:
                self.rect.centery -= 1

    def duck(self):
        self.ducking = True
        self.rect.centery = 380#380 改duck後的位置

    def unduck(self):
        self.ducking = False
        self.rect.centery = 360#360

    def apply_gravity(self):
        if self.rect.centery <= 360:
            self.rect.centery += self.gravity
        if self.rect.centery == 360 and self.onground==False:
            self.onground=True

    def update(self):
        self.animate()
        self.apply_gravity()

    def animate(self):
        self.current_image += 0.01
        if self.current_image >= 2:
            self.current_image = 0

        if self.ducking:
            self.image = self.ducking_sprites[int(self.current_image)]
        else:
            self.image = self.running_sprites[int(self.current_image)]


class Cactus(pygame.sprite.Sprite):
    def __init__(self, x_pos, y_pos):
        super().__init__()
        self.x_pos = x_pos
        self.y_pos = y_pos
        self.sprites = []
        self.sprites.append(
            pygame.transform.scale(
                pygame.image.load("tree1.png"), (100, 100)))

        self.sprites.append(
            pygame.transform.scale(
                pygame.image.load("tree2.png"), (100, 100)))

        self.sprites.append(
            pygame.transform.scale(
                pygame.image.load("tree3.png"), (100, 100)))
        for i in range(1, 7):
            current_sprite = pygame.transform.scale(
                pygame.image.load(f"cactus{i}.png"), (100, 100))
            self.sprites.append(current_sprite)
        self.image = random.choice(self.sprites)
        self.rect = self.image.get_rect(center=(self.x_pos, self.y_pos))

    def update(self):
        self.x_pos -= game_speed
        self.rect = self.image.get_rect(center=(self.x_pos, self.y_pos))


class Ptero(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.x_pos = 1300
        self.y_pos = random.choice([280, 295, 350])
        self.sprites = []
        self.sprites.append(
            pygame.transform.scale(
                pygame.image.load("santa1.png"), (84, 62)))
        self.sprites.append(
            pygame.transform.scale(
                pygame.image.load("santa2.png"), (84, 62)))
        self.current_image = 0
        self.image = self.sprites[self.current_image]
        self.rect = self.image.get_rect(center=(self.x_pos, self.y_pos))

    def update(self):
        self.animate()
        self.x_pos -= game_speed
        self.rect = self.image.get_rect(center=(self.x_pos, self.y_pos))

    def animate(self):
        self.current_image += 0.025
        if self.current_image >= 2:
            self.current_image = 0
        self.image = self.sprites[int(self.current_image)]

# Variables


game_speed = 30#5 越大越快 負值雲會繼續跑 其他倒退卡右邊 遊戲繼續會跑回來
jump_count = 10#10
player_score = 0
game_over = False
obstacle_timer = 0#0 不明
obstacle_spawn = False
obstacle_cooldown = 1000#1000 障礙物出現時間 越小越快出現
 
# Surfaces

ground = pygame.image.load("ground.png")
ground = pygame.transform.scale(ground, (1280, 20))
ground_x = 0
ground_rect = ground.get_rect(center=(640, 400))
cloud = pygame.image.load("cloud.png")
cloud = pygame.transform.scale(cloud, (200, 80))

# Groups

cloud_group = pygame.sprite.Group()
obstacle_group = pygame.sprite.Group()
dino_group = pygame.sprite.GroupSingle()
ptero_group = pygame.sprite.Group()

# Objects
dinosaur = Dino(50, 360)
dino_group.add(dinosaur)

# Sounds
death_sfx = pygame.mixer.Sound("lose.mp3")
points_sfx = pygame.mixer.Sound("100points.mp3")
jump_sfx = pygame.mixer.Sound("jump.mp3")

# Events
CLOUD_EVENT = pygame.USEREVENT
pygame.time.set_timer(CLOUD_EVENT, 3000) #3000 雲出現時間  越大越慢 越小越快

# Functions


def end_game():
    global player_score, game_speed
    game_over_text = game_font.render("Game Over!", True, "black")
    game_over_rect = game_over_text.get_rect(center=(640, 300))
    score_text = game_font.render(f"Score: {int(player_score)}", True, "black")
    score_rect = score_text.get_rect(center=(640, 340))
    screen.blit(game_over_text, game_over_rect)
    screen.blit(score_text, score_rect)
    game_speed = 5
    cloud_group.empty()
    obstacle_group.empty()


while True:
    ret,img=cap.read()
    if ret:
        imgRGB=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
        result=hands.process(imgRGB)
        #print(result.multi_hand_landmarks)
        imgHeight=img.shape[0]
        imgWidth=img.shape[1]
        jumpping=0
        
        if result.multi_hand_landmarks:
            for handLms in result.multi_hand_landmarks:
                mpDraw.draw_landmarks(img,handLms,mpHands.HAND_CONNECTIONS)#哪張圖,landmark點畫上去,連線
                for i,lm in enumerate(handLms.landmark):
                    xPos=int(lm.x*imgWidth)
                    yPos=int(lm.y*imgHeight)
                    #print(i,xPos,yPos)
                    if i==8 and yPos>350:#if keys[pygame.K_DOWN]:
                        dinosaur.duck()
                    else:
                        if dinosaur.ducking and i==8 and yPos>200 and yPos<350:
                            dinosaur.unduck()
                    
                    if i==8 and yPos<200:
                        
                        dinosaur.jump()
        
        cv2.imshow('img',img)
    if cv2.waitKey(1)==ord('q'):
        break
    


    keys = pygame.key.get_pressed()
    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            cap.release()
            cv2.destroyAllWindows() 
            pygame.quit()
            sys.exit()
        if event.type == CLOUD_EVENT:
            current_cloud_y = random.randint(50, 300)
            current_cloud = Cloud(cloud, 1380, current_cloud_y)
            cloud_group.add(current_cloud)
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE or event.key == pygame.K_UP:#if i==8 and yPos<200:
                dinosaur.jump()
                if game_over:
                    game_over = False
                    game_speed = 5
                    player_score = 0

    screen.fill("white")

    # Collisions
    if pygame.sprite.spritecollide(dino_group.sprite, obstacle_group, False):
        game_over = True
        death_sfx.play()
    if game_over:
        end_game()

    if not game_over:
        game_speed += 0.0025
        if round(player_score, 1) % 100 == 0 and int(player_score) > 0:
            points_sfx.play()

        if pygame.time.get_ticks() - obstacle_timer >= obstacle_cooldown:
            obstacle_spawn = True

        if obstacle_spawn:
            obstacle_random = random.randint(1, 50)
            if obstacle_random in range(1, 7):
                new_obstacle = Cactus(1280, 340)
                obstacle_group.add(new_obstacle)
                obstacle_timer = pygame.time.get_ticks()
                obstacle_spawn = False
            elif obstacle_random in range(7, 10):
                new_obstacle = Ptero()
                obstacle_group.add(new_obstacle)
                obstacle_timer = pygame.time.get_ticks()
                obstacle_spawn = False

        player_score += 0.1
        player_score_surface = game_font.render(
            str(int(player_score)), True, ("black"))
        screen.blit(player_score_surface, (1150, 10))

        cloud_group.update()
        cloud_group.draw(screen)

        ptero_group.update()
        ptero_group.draw(screen)

        dino_group.update()
        dino_group.draw(screen)

        obstacle_group.update()
        obstacle_group.draw(screen)

        ground_x -= game_speed

        screen.blit(ground, (ground_x, 360))
        screen.blit(ground, (ground_x + 1280, 360))

        if ground_x <= -1280:
            ground_x = 0

    clock.tick(120)
    pygame.display.update()
    
    -------------------------------------
import mediapipe as mp
import cv2 
cap = cv2.VideoCapture(0)
mpHands = mp.solutions.hands
hands = mpHands.Hands()
mpDraw = mp.solutions.drawing_utils



while True: 
    ret,img=cap.read()
    if ret:
        """imgRGB=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
        result=hands.process(imgRGB)
        #print(result.multi_hand_landmarks)
        imgHeight=img.shape[0]
        imgWidth=img.shape[1]
        jumpping=0
        
        if result.multi_hand_landmarks:
            for handLms in result.multi_hand_landmarks:
                mpDraw.draw_landmarks(img,handLms,mpHands.HAND_CONNECTIONS)#哪張圖,landmark點畫上去,連線
                for i,lm in enumerate(handLms.landmark):
                    xPos=int(lm.x*imgWidth)
                    yPos=int(lm.y*imgHeight)
                    #print(i,xPos,yPos)
          
        """
        cv2.imshow('img',img)
    if cv2.waitKey(1)==ord('q'):
        break
    






import pygame
import sys
import random
import cv2
import mediapipe as mp

cap = cv2.VideoCapture(0)
mpHands = mp.solutions.hands
hands = mpHands.Hands()
mpDraw = mp.solutions.drawing_utils




pygame.init()
screen = pygame.display.set_mode((1280, 720))
clock = pygame.time.Clock()
pygame.display.set_caption("Xmas dragon Game")

game_font = pygame.font.Font("PressStart2P-Regular.ttf", 24) #字體及大小

# Classes


class Cloud(pygame.sprite.Sprite):
    def __init__(self, image, x_pos, y_pos):
        super().__init__()
        self.image = image
        self.x_pos = x_pos
        self.y_pos = y_pos
        self.rect = self.image.get_rect(center=(self.x_pos, self.y_pos))

    def update(self):
        self.rect.x -= 1


class Dino(pygame.sprite.Sprite):
    def __init__(self, x_pos, y_pos):
        super().__init__()
        self.running_sprites = []
        self.ducking_sprites = []

        self.running_sprites.append(pygame.transform.scale(
            pygame.image.load("dragon3.png"), (80, 100)))
        self.running_sprites.append(pygame.transform.scale(
            pygame.image.load("dragon2.png"), (80, 100)))

        self.ducking_sprites.append(pygame.transform.scale(
            pygame.image.load(f"dragon4.png"), (110, 60)))
        self.ducking_sprites.append(pygame.transform.scale(
            pygame.image.load(f"dragon5.png"), (110, 60)))

        self.x_pos = x_pos
        self.y_pos = y_pos
        self.current_image = 0
        self.image = self.running_sprites[self.current_image]
        self.rect = self.image.get_rect(center=(self.x_pos, self.y_pos))
        self.velocity = 35 #50 跳的高度 越小越高 負值依舊越高
        self.gravity = 10 #4.5 降落時的速度 越大越快 負值為上升
        self.ducking = False
        self.onground=True

    def jump(self):
        
        if self.rect.centery >= 360 and self.onground==True:
            jump_sfx.play()
            while self.rect.centery - self.velocity > 40:
                self.rect.centery -= 1

    def duck(self):
        self.ducking = True
        self.rect.centery = 380#380 改duck後的位置

    def unduck(self):
        self.ducking = False
        self.rect.centery = 360#360

    def apply_gravity(self):
        if self.rect.centery <= 360:
            self.rect.centery += self.gravity
        if self.rect.centery == 360 and self.onground==False:
            self.onground=True

    def update(self):
        self.animate()
        self.apply_gravity()

    def animate(self):
        self.current_image += 0.01
        if self.current_image >= 2:
            self.current_image = 0

        if self.ducking:
            self.image = self.ducking_sprites[int(self.current_image)]
        else:
            self.image = self.running_sprites[int(self.current_image)]


class Cactus(pygame.sprite.Sprite):
    def __init__(self, x_pos, y_pos):
        super().__init__()
        self.x_pos = x_pos
        self.y_pos = y_pos
        self.sprites = []
        self.sprites.append(
            pygame.transform.scale(
                pygame.image.load("tree1.png"), (100, 100)))

        self.sprites.append(
            pygame.transform.scale(
                pygame.image.load("tree2.png"), (100, 100)))

        self.sprites.append(
            pygame.transform.scale(
                pygame.image.load("tree3.png"), (100, 100)))
        for i in range(1, 7):
            current_sprite = pygame.transform.scale(
                pygame.image.load(f"cactus{i}.png"), (100, 100))
            self.sprites.append(current_sprite)
        self.image = random.choice(self.sprites)
        self.rect = self.image.get_rect(center=(self.x_pos, self.y_pos))

    def update(self):
        self.x_pos -= game_speed
        self.rect = self.image.get_rect(center=(self.x_pos, self.y_pos))


class Ptero(pygame.sprite.Sprite):
    def __init__(self):
        self.x_pos = 1300
        self.y_pos = random.choice([280, 295, 350])
        self.sprites = []
        super().__init__()
        self.sprites.append(
            pygame.transform.scale(
                pygame.image.load("santa1.png"), (84, 62)))
        self.sprites.append(
            pygame.transform.scale(
                pygame.image.load("santa2.png"), (84, 62)))
        self.current_image = 0
        self.image = self.sprites[self.current_image]
        self.rect = self.image.get_rect(center=(self.x_pos, self.y_pos))

    def update(self):
        self.animate()
        self.x_pos -= game_speed
        self.rect = self.image.get_rect(center=(self.x_pos, self.y_pos))

    def animate(self):
        self.current_image += 0.025
        if self.current_image >= 2:
            self.current_image = 0
        self.image = self.sprites[int(self.current_image)]

# Variables


game_speed = 15#5 越大越快 負值雲會繼續跑 其他倒退卡右邊 遊戲繼續會跑回來
jump_count = 10#10
player_score = 0
game_over = False
obstacle_timer = 0#0 不明
obstacle_spawn = False
obstacle_cooldown = 1000#1000 障礙物出現時間 越小越快出現
 
# Surfaces

ground = pygame.image.load("ground.png")
ground = pygame.transform.scale(ground, (1280, 20))
ground_x = 0
ground_rect = ground.get_rect(center=(640, 400))
cloud = pygame.image.load("cloud.png")
cloud = pygame.transform.scale(cloud, (200, 80))

# Groups

cloud_group = pygame.sprite.Group()
obstacle_group = pygame.sprite.Group()
dino_group = pygame.sprite.GroupSingle()
ptero_group = pygame.sprite.Group()

# Objects
dinosaur = Dino(50, 360)
dino_group.add(dinosaur)

# Sounds
death_sfx = pygame.mixer.Sound("lose.mp3")
points_sfx = pygame.mixer.Sound("100points.mp3")
jump_sfx = pygame.mixer.Sound("jump.mp3")

# Events
CLOUD_EVENT = pygame.USEREVENT
pygame.time.set_timer(CLOUD_EVENT, 3000) #3000 雲出現時間  越大越慢 越小越快

# Functions


def end_game():
    global player_score, game_speed
    game_over_text = game_font.render("Game Over!", True, "black")
    game_over_rect = game_over_text.get_rect(center=(640, 300))
    score_text = game_font.render(f"Score: {int(player_score)}", True, "black")
    score_rect = score_text.get_rect(center=(640, 340))
    screen.blit(game_over_text, game_over_rect)
    screen.blit(score_text, score_rect)
    game_speed = 5
    cloud_group.empty()
    obstacle_group.empty()

"""menu(death_count==0)
if death_count==0:
    text=font.render("press keyboard to start",True,(0,0,0))
elif death_count>0:
    text=font.render("press keyboard to start",True,(0,0,0))
    score=font.render("Your score is : " + str(points),True,(0,0,0))"""
    
    
show_init=True
while True:
    
    waiting = True
    start=True
    while waiting:
        clock.tick()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
               
            elif event.type == pygame.KEYUP:
                waiting = False
    
    ret,img=cap.read()
    if ret:        
        imgRGB=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
        result=hands.process(imgRGB)
        #print(result.multi_hand_landmarks)
        imgHeight=img.shape[0]
        imgWidth=img.shape[1]
        jumpping=0
        cv2.line(img,(0,160),(640,160),(0,0,255),5)#(影像, 開始座標, 結束座標, 顏色, 線條寬度)
        cv2.line(img,(0,320),(640,320),(0,0,255),5)

        if result.multi_hand_landmarks:
            for handLms in result.multi_hand_landmarks:
                #mpDraw.draw_landmarks(img,handLms,mpHands.HAND_CONNECTIONS)#哪張圖,landmark點畫上去,連線
                for i,lm in enumerate(handLms.landmark):
                    xPos=int(lm.x*imgWidth)
                    yPos=int(lm.y*imgHeight)
                    #print(i,xPos,yPos)
                    if i==8 and yPos>320:#if keys[pygame.K_DOWN]:
                        dinosaur.duck()
                    else:
                        if dinosaur.ducking and i==8 and yPos>160 and yPos<320:
                            dinosaur.unduck()
                                
                    if i==8 and yPos<160:
                        
                        dinosaur.jump()

        cv2.imshow('img',img)



    if cv2.waitKey(1)==ord('q'):
        break


    keys = pygame.key.get_pressed()
    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            cap.release()
            cv2.destroyAllWindows() 
            pygame.quit()
            sys.exit()
        if event.type == CLOUD_EVENT:
            current_cloud_y = random.randint(50, 300)
            current_cloud = Cloud(cloud, 1380, current_cloud_y)
            cloud_group.add(current_cloud)
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE or event.key == pygame.K_UP:#if i==8 and yPos<200:
                dinosaur.jump()
                if game_over:
                    game_over = False
                    game_speed = 15
                    player_score = 0

    screen.fill("white")

    # Collisions
    if pygame.sprite.spritecollide(dino_group.sprite, obstacle_group, False):
        game_over = True
        death_sfx.play()
    if game_over:
        end_game()

    if not game_over:
        game_speed += 0.0025
        if round(player_score, 1) % 100 == 0 and int(player_score) > 0:
            points_sfx.play()

        if pygame.time.get_ticks() - obstacle_timer >= obstacle_cooldown:
            obstacle_spawn = True

        if obstacle_spawn:
            obstacle_random = random.randint(1, 50)
            if obstacle_random in range(1, 7):
                new_obstacle = Cactus(1280, 340)
                obstacle_group.add(new_obstacle)
                obstacle_timer = pygame.time.get_ticks()
                obstacle_spawn = False
            elif obstacle_random in range(7, 10):
                new_obstacle = Ptero()
                obstacle_group.add(new_obstacle)
                obstacle_timer = pygame.time.get_ticks()
                obstacle_spawn = False

        player_score += 0.1
        player_score_surface = game_font.render(
            str(int(player_score)), True, ("black"))
        screen.blit(player_score_surface, (1150, 10))

        cloud_group.update()
        cloud_group.draw(screen)

        ptero_group.update()
        ptero_group.draw(screen)

        dino_group.update()
        dino_group.draw(screen)

        obstacle_group.update()
        obstacle_group.draw(screen)

        ground_x -= game_speed

        screen.blit(ground, (ground_x, 360))
        screen.blit(ground, (ground_x + 1280, 360))

        if ground_x <= -1280:
            ground_x = 0

    clock.tick(120)
    pygame.display.update()
    
    


